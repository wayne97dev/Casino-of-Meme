"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptWord = exports.promptPin = exports.promptPassphrase = exports.cancelPrompt = void 0;
const transport_1 = require("@trezor/transport");
const events_1 = require("../events");
const cancelPrompt = (device, expectResponse = true) => {
    const session = device.getLocalSession();
    if (!session) {
        return Promise.resolve({
            success: false,
            error: transport_1.TRANSPORT_ERROR.SESSION_NOT_FOUND,
        });
    }
    const cancelArgs = {
        session,
        name: 'Cancel',
        data: {},
        protocol: device.protocol,
    };
    return expectResponse ? device.transport.call(cancelArgs) : device.transport.send(cancelArgs);
};
exports.cancelPrompt = cancelPrompt;
const extractMessage = (payload) => (payload && 'message' in payload.message && payload.message.message) || '';
const prompt = (event, { device, ...rest }) => new Promise(resolve => {
    const cancelAndReject = (error) => (0, exports.cancelPrompt)(device).then(response => response.success
        ? resolve({
            success: false,
            error: error || extractMessage(response.payload),
            message: extractMessage(response.payload),
            isTransportError: !response.success,
        })
        : resolve({
            success: false,
            error: response.error,
            isTransportError: true,
        }));
    if (device.listenerCount(event) > 0) {
        device.setCancelableAction(cancelAndReject);
        const callback = (...[response, error]) => {
            device.clearCancelableAction();
            if (error || response == null) {
                cancelAndReject(error);
            }
            else {
                resolve({ success: true, payload: response });
            }
        };
        device.emit(event, { device, callback, ...rest });
    }
    else {
        cancelAndReject(`${event} callback not configured`);
    }
});
const promptPassphrase = (device) => prompt(events_1.DEVICE.PASSPHRASE, { device });
exports.promptPassphrase = promptPassphrase;
const promptPin = (device, type) => prompt(events_1.DEVICE.PIN, { device, type });
exports.promptPin = promptPin;
const promptWord = (device, type) => prompt(events_1.DEVICE.WORD, { device, type });
exports.promptWord = promptWord;
//# sourceMappingURL=prompts.js.map