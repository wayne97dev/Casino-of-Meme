import { Messages } from '@trezor/transport';
import type { ReadWriteError } from '@trezor/transport/lib/transports/abstract';
import { DEVICE } from '../events';
import type { Device, DeviceEvents } from './Device';
type PromptEvents = typeof DEVICE.PIN | typeof DEVICE.PASSPHRASE | typeof DEVICE.WORD;
type DeviceEventCallback<K extends PromptEvents> = DeviceEvents[K]['callback'];
type PromptReturnType<E extends PromptEvents> = {
    success: true;
    payload: NonNullable<Parameters<DeviceEventCallback<E>>[0]>;
} | {
    success: false;
    isTransportError: false;
    error: string;
    message: string;
} | {
    success: false;
    isTransportError: true;
    error: ReadWriteError;
};
export type PromptCallback<T> = (response: T | null, error?: string) => void;
export declare const cancelPrompt: (device: Device, expectResponse?: boolean) => Promise<{
    success: false;
    error: "session not found";
}> | import("@trezor/transport/lib/types").AsyncResultWithTypedError<{
    type: "BinanceTransferMsg";
    message: Messages.BinanceTransferMsg;
} | {
    type: "BinanceOrderMsg";
    message: Messages.BinanceOrderMsg;
} | {
    type: "BinanceCancelMsg";
    message: Messages.BinanceCancelMsg;
} | {
    type: "BinanceGetAddress";
    message: Messages.BinanceGetAddress;
} | {
    type: "BinanceAddress";
    message: Messages.BinanceAddress;
} | {
    type: "BinanceGetPublicKey";
    message: Messages.BinanceGetPublicKey;
} | {
    type: "BinancePublicKey";
    message: Messages.BinancePublicKey;
} | {
    type: "BinanceSignTx";
    message: Messages.BinanceSignTx;
} | {
    type: "BinanceTxRequest";
    message: Messages.BinanceTxRequest;
} | {
    type: "BinanceCoin";
    message: Messages.BinanceCoin;
} | {
    type: "BinanceInputOutput";
    message: Messages.BinanceInputOutput;
} | {
    type: "BinanceSignedTx";
    message: Messages.BinanceSignedTx;
} | {
    type: "HDNodeType";
    message: Messages.HDNodeType;
} | {
    type: "HDNodePathType";
    message: Messages.HDNodePathType;
} | {
    type: "MultisigRedeemScriptType";
    message: Messages.MultisigRedeemScriptType;
} | {
    type: "GetPublicKey";
    message: Messages.GetPublicKey;
} | {
    type: "PublicKey";
    message: Messages.PublicKey;
} | {
    type: "GetAddress";
    message: Messages.GetAddress;
} | {
    type: "Address";
    message: Messages.Address;
} | {
    type: "GetOwnershipId";
    message: Messages.GetOwnershipId;
} | {
    type: "OwnershipId";
    message: Messages.OwnershipId;
} | {
    type: "SignMessage";
    message: Messages.SignMessage;
} | {
    type: "MessageSignature";
    message: Messages.MessageSignature;
} | {
    type: "VerifyMessage";
    message: Messages.VerifyMessage;
} | {
    type: "CoinJoinRequest";
    message: Messages.CoinJoinRequest;
} | {
    type: "SignTx";
    message: Messages.SignTx;
} | {
    type: "TxRequestDetailsType";
    message: Messages.TxRequestDetailsType;
} | {
    type: "TxRequestSerializedType";
    message: Messages.TxRequestSerializedType;
} | {
    type: "TxRequest";
    message: Messages.TxRequest;
} | {
    type: "TxInputType";
    message: Messages.TxInputType;
} | {
    type: "TxOutputBinType";
    message: Messages.TxOutputBinType;
} | {
    type: "TxOutputType";
    message: Messages.TxOutputType;
} | {
    type: "PrevTx";
    message: Messages.PrevTx;
} | {
    type: "PrevInput";
    message: Messages.PrevInput;
} | {
    type: "PrevOutput";
    message: Messages.PrevOutput;
} | {
    type: "TextMemo";
    message: Messages.TextMemo;
} | {
    type: "RefundMemo";
    message: Messages.RefundMemo;
} | {
    type: "CoinPurchaseMemo";
    message: Messages.CoinPurchaseMemo;
} | {
    type: "PaymentRequestMemo";
    message: Messages.PaymentRequestMemo;
} | {
    type: "TxAckPaymentRequest";
    message: Messages.TxAckPaymentRequest;
} | {
    type: "TxAck";
    message: Messages.TxAck;
} | {
    type: "TxAckInputWrapper";
    message: Messages.TxAckInputWrapper;
} | {
    type: "TxAckInput";
    message: Messages.TxAckInput;
} | {
    type: "TxAckOutputWrapper";
    message: Messages.TxAckOutputWrapper;
} | {
    type: "TxAckOutput";
    message: Messages.TxAckOutput;
} | {
    type: "TxAckPrevMeta";
    message: Messages.TxAckPrevMeta;
} | {
    type: "TxAckPrevInputWrapper";
    message: Messages.TxAckPrevInputWrapper;
} | {
    type: "TxAckPrevInput";
    message: Messages.TxAckPrevInput;
} | {
    type: "TxAckPrevOutputWrapper";
    message: Messages.TxAckPrevOutputWrapper;
} | {
    type: "TxAckPrevOutput";
    message: Messages.TxAckPrevOutput;
} | {
    type: "TxAckPrevExtraDataWrapper";
    message: Messages.TxAckPrevExtraDataWrapper;
} | {
    type: "TxAckPrevExtraData";
    message: Messages.TxAckPrevExtraData;
} | {
    type: "GetOwnershipProof";
    message: Messages.GetOwnershipProof;
} | {
    type: "OwnershipProof";
    message: Messages.OwnershipProof;
} | {
    type: "AuthorizeCoinJoin";
    message: Messages.AuthorizeCoinJoin;
} | {
    type: "FirmwareErase";
    message: Messages.FirmwareErase;
} | {
    type: "FirmwareRequest";
    message: Messages.FirmwareRequest;
} | {
    type: "FirmwareUpload";
    message: Messages.FirmwareUpload;
} | {
    type: "ProdTestT1";
    message: Messages.ProdTestT1;
} | {
    type: "CardanoBlockchainPointerType";
    message: Messages.CardanoBlockchainPointerType;
} | {
    type: "CardanoNativeScript";
    message: Messages.CardanoNativeScript;
} | {
    type: "CardanoGetNativeScriptHash";
    message: Messages.CardanoGetNativeScriptHash;
} | {
    type: "CardanoNativeScriptHash";
    message: Messages.CardanoNativeScriptHash;
} | {
    type: "CardanoAddressParametersType";
    message: Messages.CardanoAddressParametersType;
} | {
    type: "CardanoGetAddress";
    message: Messages.CardanoGetAddress;
} | {
    type: "CardanoAddress";
    message: Messages.CardanoAddress;
} | {
    type: "CardanoGetPublicKey";
    message: Messages.CardanoGetPublicKey;
} | {
    type: "CardanoPublicKey";
    message: Messages.CardanoPublicKey;
} | {
    type: "CardanoSignTxInit";
    message: Messages.CardanoSignTxInit;
} | {
    type: "CardanoTxInput";
    message: Messages.CardanoTxInput;
} | {
    type: "CardanoTxOutput";
    message: Messages.CardanoTxOutput;
} | {
    type: "CardanoAssetGroup";
    message: Messages.CardanoAssetGroup;
} | {
    type: "CardanoToken";
    message: Messages.CardanoToken;
} | {
    type: "CardanoTxInlineDatumChunk";
    message: Messages.CardanoTxInlineDatumChunk;
} | {
    type: "CardanoTxReferenceScriptChunk";
    message: Messages.CardanoTxReferenceScriptChunk;
} | {
    type: "CardanoPoolOwner";
    message: Messages.CardanoPoolOwner;
} | {
    type: "CardanoPoolRelayParameters";
    message: Messages.CardanoPoolRelayParameters;
} | {
    type: "CardanoPoolMetadataType";
    message: Messages.CardanoPoolMetadataType;
} | {
    type: "CardanoPoolParametersType";
    message: Messages.CardanoPoolParametersType;
} | {
    type: "CardanoDRep";
    message: Messages.CardanoDRep;
} | {
    type: "CardanoTxCertificate";
    message: Messages.CardanoTxCertificate;
} | {
    type: "CardanoTxWithdrawal";
    message: Messages.CardanoTxWithdrawal;
} | {
    type: "CardanoCVoteRegistrationDelegation";
    message: Messages.CardanoCVoteRegistrationDelegation;
} | {
    type: "CardanoCVoteRegistrationParametersType";
    message: Messages.CardanoCVoteRegistrationParametersType;
} | {
    type: "CardanoTxAuxiliaryData";
    message: Messages.CardanoTxAuxiliaryData;
} | {
    type: "CardanoTxMint";
    message: Messages.CardanoTxMint;
} | {
    type: "CardanoTxCollateralInput";
    message: Messages.CardanoTxCollateralInput;
} | {
    type: "CardanoTxRequiredSigner";
    message: Messages.CardanoTxRequiredSigner;
} | {
    type: "CardanoTxReferenceInput";
    message: Messages.CardanoTxReferenceInput;
} | {
    type: "CardanoTxItemAck";
    message: Messages.CardanoTxItemAck;
} | {
    type: "CardanoTxAuxiliaryDataSupplement";
    message: Messages.CardanoTxAuxiliaryDataSupplement;
} | {
    type: "CardanoTxWitnessRequest";
    message: Messages.CardanoTxWitnessRequest;
} | {
    type: "CardanoTxWitnessResponse";
    message: Messages.CardanoTxWitnessResponse;
} | {
    type: "CardanoTxHostAck";
    message: Messages.CardanoTxHostAck;
} | {
    type: "CardanoTxBodyHash";
    message: Messages.CardanoTxBodyHash;
} | {
    type: "CardanoSignTxFinished";
    message: Messages.CardanoSignTxFinished;
} | {
    type: "Success";
    message: Messages.Success;
} | {
    type: "Failure";
    message: Messages.Failure;
} | {
    type: "ButtonRequest";
    message: Messages.ButtonRequest;
} | {
    type: "ButtonAck";
    message: Messages.ButtonAck;
} | {
    type: "PinMatrixRequest";
    message: Messages.PinMatrixRequest;
} | {
    type: "PinMatrixAck";
    message: Messages.PinMatrixAck;
} | {
    type: "PassphraseRequest";
    message: Messages.PassphraseRequest;
} | {
    type: "PassphraseAck";
    message: Messages.PassphraseAck;
} | {
    type: "Deprecated_PassphraseStateRequest";
    message: Messages.Deprecated_PassphraseStateRequest;
} | {
    type: "Deprecated_PassphraseStateAck";
    message: Messages.Deprecated_PassphraseStateAck;
} | {
    type: "CipherKeyValue";
    message: Messages.CipherKeyValue;
} | {
    type: "CipheredKeyValue";
    message: Messages.CipheredKeyValue;
} | {
    type: "IdentityType";
    message: Messages.IdentityType;
} | {
    type: "SignIdentity";
    message: Messages.SignIdentity;
} | {
    type: "SignedIdentity";
    message: Messages.SignedIdentity;
} | {
    type: "GetECDHSessionKey";
    message: Messages.GetECDHSessionKey;
} | {
    type: "ECDHSessionKey";
    message: Messages.ECDHSessionKey;
} | {
    type: "DebugLinkResetDebugEvents";
    message: Messages.DebugLinkResetDebugEvents;
} | {
    type: "DebugLinkOptigaSetSecMax";
    message: Messages.DebugLinkOptigaSetSecMax;
} | {
    type: "EosGetPublicKey";
    message: Messages.EosGetPublicKey;
} | {
    type: "EosPublicKey";
    message: Messages.EosPublicKey;
} | {
    type: "EosTxHeader";
    message: Messages.EosTxHeader;
} | {
    type: "EosSignTx";
    message: Messages.EosSignTx;
} | {
    type: "EosTxActionRequest";
    message: Messages.EosTxActionRequest;
} | {
    type: "EosAsset";
    message: Messages.EosAsset;
} | {
    type: "EosPermissionLevel";
    message: Messages.EosPermissionLevel;
} | {
    type: "EosAuthorizationKey";
    message: Messages.EosAuthorizationKey;
} | {
    type: "EosAuthorizationAccount";
    message: Messages.EosAuthorizationAccount;
} | {
    type: "EosAuthorizationWait";
    message: Messages.EosAuthorizationWait;
} | {
    type: "EosAuthorization";
    message: Messages.EosAuthorization;
} | {
    type: "EosActionCommon";
    message: Messages.EosActionCommon;
} | {
    type: "EosActionTransfer";
    message: Messages.EosActionTransfer;
} | {
    type: "EosActionDelegate";
    message: Messages.EosActionDelegate;
} | {
    type: "EosActionUndelegate";
    message: Messages.EosActionUndelegate;
} | {
    type: "EosActionRefund";
    message: Messages.EosActionRefund;
} | {
    type: "EosActionBuyRam";
    message: Messages.EosActionBuyRam;
} | {
    type: "EosActionBuyRamBytes";
    message: Messages.EosActionBuyRamBytes;
} | {
    type: "EosActionSellRam";
    message: Messages.EosActionSellRam;
} | {
    type: "EosActionVoteProducer";
    message: Messages.EosActionVoteProducer;
} | {
    type: "EosActionUpdateAuth";
    message: Messages.EosActionUpdateAuth;
} | {
    type: "EosActionDeleteAuth";
    message: Messages.EosActionDeleteAuth;
} | {
    type: "EosActionLinkAuth";
    message: Messages.EosActionLinkAuth;
} | {
    type: "EosActionUnlinkAuth";
    message: Messages.EosActionUnlinkAuth;
} | {
    type: "EosActionNewAccount";
    message: Messages.EosActionNewAccount;
} | {
    type: "EosActionUnknown";
    message: Messages.EosActionUnknown;
} | {
    type: "EosTxActionAck";
    message: Messages.EosTxActionAck;
} | {
    type: "EosSignedTx";
    message: Messages.EosSignedTx;
} | {
    type: "EthereumNetworkInfo";
    message: Messages.EthereumNetworkInfo;
} | {
    type: "EthereumTokenInfo";
    message: Messages.EthereumTokenInfo;
} | {
    type: "EthereumDefinitions";
    message: Messages.EthereumDefinitions;
} | {
    type: "EthereumSignTypedData";
    message: Messages.EthereumSignTypedData;
} | {
    type: "EthereumTypedDataStructRequest";
    message: Messages.EthereumTypedDataStructRequest;
} | {
    type: "EthereumFieldType";
    message: Messages.EthereumFieldType;
} | {
    type: "EthereumStructMember";
    message: Messages.EthereumStructMember;
} | {
    type: "EthereumTypedDataStructAck";
    message: Messages.EthereumTypedDataStructAck;
} | {
    type: "EthereumTypedDataValueRequest";
    message: Messages.EthereumTypedDataValueRequest;
} | {
    type: "EthereumTypedDataValueAck";
    message: Messages.EthereumTypedDataValueAck;
} | {
    type: "EthereumGetPublicKey";
    message: Messages.EthereumGetPublicKey;
} | {
    type: "EthereumPublicKey";
    message: Messages.EthereumPublicKey;
} | {
    type: "EthereumGetAddress";
    message: Messages.EthereumGetAddress;
} | {
    type: "EthereumAddress";
    message: Messages.EthereumAddress;
} | {
    type: "EthereumSignTx";
    message: Messages.EthereumSignTx;
} | {
    type: "EthereumAccessList";
    message: Messages.EthereumAccessList;
} | {
    type: "EthereumSignTxEIP1559";
    message: Messages.EthereumSignTxEIP1559;
} | {
    type: "EthereumTxRequest";
    message: Messages.EthereumTxRequest;
} | {
    type: "EthereumTxAck";
    message: Messages.EthereumTxAck;
} | {
    type: "EthereumSignMessage";
    message: Messages.EthereumSignMessage;
} | {
    type: "EthereumMessageSignature";
    message: Messages.EthereumMessageSignature;
} | {
    type: "EthereumVerifyMessage";
    message: Messages.EthereumVerifyMessage;
} | {
    type: "EthereumSignTypedHash";
    message: Messages.EthereumSignTypedHash;
} | {
    type: "EthereumTypedDataSignature";
    message: Messages.EthereumTypedDataSignature;
} | {
    type: "Initialize";
    message: Messages.Initialize;
} | {
    type: "GetFeatures";
    message: Messages.GetFeatures;
} | {
    type: "RecoveryDevice";
    message: Messages.RecoveryDevice;
} | {
    type: "Features";
    message: Messages.Features;
} | {
    type: "LockDevice";
    message: Messages.LockDevice;
} | {
    type: "SetBusy";
    message: Messages.SetBusy;
} | {
    type: "EndSession";
    message: Messages.EndSession;
} | {
    type: "ApplySettings";
    message: Messages.ApplySettings;
} | {
    type: "ChangeLanguage";
    message: Messages.ChangeLanguage;
} | {
    type: "TranslationDataRequest";
    message: Messages.TranslationDataRequest;
} | {
    type: "TranslationDataAck";
    message: Messages.TranslationDataAck;
} | {
    type: "ApplyFlags";
    message: Messages.ApplyFlags;
} | {
    type: "ChangePin";
    message: Messages.ChangePin;
} | {
    type: "ChangeWipeCode";
    message: Messages.ChangeWipeCode;
} | {
    type: "SdProtect";
    message: Messages.SdProtect;
} | {
    type: "Ping";
    message: Messages.Ping;
} | {
    type: "Cancel";
    message: Messages.Cancel;
} | {
    type: "GetEntropy";
    message: Messages.GetEntropy;
} | {
    type: "Entropy";
    message: Messages.Entropy;
} | {
    type: "GetFirmwareHash";
    message: Messages.GetFirmwareHash;
} | {
    type: "FirmwareHash";
    message: Messages.FirmwareHash;
} | {
    type: "AuthenticateDevice";
    message: Messages.AuthenticateDevice;
} | {
    type: "AuthenticityProof";
    message: Messages.AuthenticityProof;
} | {
    type: "WipeDevice";
    message: Messages.WipeDevice;
} | {
    type: "LoadDevice";
    message: Messages.LoadDevice;
} | {
    type: "ResetDevice";
    message: Messages.ResetDevice;
} | {
    type: "Slip39Group";
    message: Messages.Slip39Group;
} | {
    type: "BackupDevice";
    message: Messages.BackupDevice;
} | {
    type: "EntropyRequest";
    message: Messages.EntropyRequest;
} | {
    type: "EntropyAck";
    message: Messages.EntropyAck;
} | {
    type: "EntropyCheckReady";
    message: Messages.EntropyCheckReady;
} | {
    type: "EntropyCheckContinue";
    message: Messages.EntropyCheckContinue;
} | {
    type: "WordRequest";
    message: Messages.WordRequest;
} | {
    type: "WordAck";
    message: Messages.WordAck;
} | {
    type: "SetU2FCounter";
    message: Messages.SetU2FCounter;
} | {
    type: "GetNextU2FCounter";
    message: Messages.GetNextU2FCounter;
} | {
    type: "NextU2FCounter";
    message: Messages.NextU2FCounter;
} | {
    type: "DoPreauthorized";
    message: Messages.DoPreauthorized;
} | {
    type: "PreauthorizedRequest";
    message: Messages.PreauthorizedRequest;
} | {
    type: "CancelAuthorization";
    message: Messages.CancelAuthorization;
} | {
    type: "RebootToBootloader";
    message: Messages.RebootToBootloader;
} | {
    type: "GetNonce";
    message: Messages.GetNonce;
} | {
    type: "Nonce";
    message: Messages.Nonce;
} | {
    type: "UnlockPath";
    message: Messages.UnlockPath;
} | {
    type: "UnlockedPathRequest";
    message: Messages.UnlockedPathRequest;
} | {
    type: "ShowDeviceTutorial";
    message: Messages.ShowDeviceTutorial;
} | {
    type: "UnlockBootloader";
    message: Messages.UnlockBootloader;
} | {
    type: "SetBrightness";
    message: Messages.SetBrightness;
} | {
    type: "NEMGetAddress";
    message: Messages.NEMGetAddress;
} | {
    type: "NEMAddress";
    message: Messages.NEMAddress;
} | {
    type: "NEMTransactionCommon";
    message: Messages.NEMTransactionCommon;
} | {
    type: "NEMMosaic";
    message: Messages.NEMMosaic;
} | {
    type: "NEMTransfer";
    message: Messages.NEMTransfer;
} | {
    type: "NEMProvisionNamespace";
    message: Messages.NEMProvisionNamespace;
} | {
    type: "NEMMosaicDefinition";
    message: Messages.NEMMosaicDefinition;
} | {
    type: "NEMMosaicCreation";
    message: Messages.NEMMosaicCreation;
} | {
    type: "NEMMosaicSupplyChange";
    message: Messages.NEMMosaicSupplyChange;
} | {
    type: "NEMCosignatoryModification";
    message: Messages.NEMCosignatoryModification;
} | {
    type: "NEMAggregateModification";
    message: Messages.NEMAggregateModification;
} | {
    type: "NEMImportanceTransfer";
    message: Messages.NEMImportanceTransfer;
} | {
    type: "NEMSignTx";
    message: Messages.NEMSignTx;
} | {
    type: "NEMSignedTx";
    message: Messages.NEMSignedTx;
} | {
    type: "NEMDecryptMessage";
    message: Messages.NEMDecryptMessage;
} | {
    type: "NEMDecryptedMessage";
    message: Messages.NEMDecryptedMessage;
} | {
    type: "RippleGetAddress";
    message: Messages.RippleGetAddress;
} | {
    type: "RippleAddress";
    message: Messages.RippleAddress;
} | {
    type: "RipplePayment";
    message: Messages.RipplePayment;
} | {
    type: "RippleSignTx";
    message: Messages.RippleSignTx;
} | {
    type: "RippleSignedTx";
    message: Messages.RippleSignedTx;
} | {
    type: "SolanaGetPublicKey";
    message: Messages.SolanaGetPublicKey;
} | {
    type: "SolanaPublicKey";
    message: Messages.SolanaPublicKey;
} | {
    type: "SolanaGetAddress";
    message: Messages.SolanaGetAddress;
} | {
    type: "SolanaAddress";
    message: Messages.SolanaAddress;
} | {
    type: "SolanaTxTokenAccountInfo";
    message: Messages.SolanaTxTokenAccountInfo;
} | {
    type: "SolanaTxAdditionalInfo";
    message: Messages.SolanaTxAdditionalInfo;
} | {
    type: "SolanaSignTx";
    message: Messages.SolanaSignTx;
} | {
    type: "SolanaTxSignature";
    message: Messages.SolanaTxSignature;
} | {
    type: "StellarAsset";
    message: Messages.StellarAsset;
} | {
    type: "StellarGetAddress";
    message: Messages.StellarGetAddress;
} | {
    type: "StellarAddress";
    message: Messages.StellarAddress;
} | {
    type: "StellarSignTx";
    message: Messages.StellarSignTx;
} | {
    type: "StellarTxOpRequest";
    message: Messages.StellarTxOpRequest;
} | {
    type: "StellarPaymentOp";
    message: Messages.StellarPaymentOp;
} | {
    type: "StellarCreateAccountOp";
    message: Messages.StellarCreateAccountOp;
} | {
    type: "StellarPathPaymentStrictReceiveOp";
    message: Messages.StellarPathPaymentStrictReceiveOp;
} | {
    type: "StellarPathPaymentStrictSendOp";
    message: Messages.StellarPathPaymentStrictSendOp;
} | {
    type: "StellarManageSellOfferOp";
    message: Messages.StellarManageSellOfferOp;
} | {
    type: "StellarManageBuyOfferOp";
    message: Messages.StellarManageBuyOfferOp;
} | {
    type: "StellarCreatePassiveSellOfferOp";
    message: Messages.StellarCreatePassiveSellOfferOp;
} | {
    type: "StellarSetOptionsOp";
    message: Messages.StellarSetOptionsOp;
} | {
    type: "StellarChangeTrustOp";
    message: Messages.StellarChangeTrustOp;
} | {
    type: "StellarAllowTrustOp";
    message: Messages.StellarAllowTrustOp;
} | {
    type: "StellarAccountMergeOp";
    message: Messages.StellarAccountMergeOp;
} | {
    type: "StellarManageDataOp";
    message: Messages.StellarManageDataOp;
} | {
    type: "StellarBumpSequenceOp";
    message: Messages.StellarBumpSequenceOp;
} | {
    type: "StellarClaimClaimableBalanceOp";
    message: Messages.StellarClaimClaimableBalanceOp;
} | {
    type: "StellarSignedTx";
    message: Messages.StellarSignedTx;
} | {
    type: "TezosGetAddress";
    message: Messages.TezosGetAddress;
} | {
    type: "TezosAddress";
    message: Messages.TezosAddress;
} | {
    type: "TezosGetPublicKey";
    message: Messages.TezosGetPublicKey;
} | {
    type: "TezosPublicKey";
    message: Messages.TezosPublicKey;
} | {
    type: "TezosContractID";
    message: Messages.TezosContractID;
} | {
    type: "TezosRevealOp";
    message: Messages.TezosRevealOp;
} | {
    type: "TezosManagerTransfer";
    message: Messages.TezosManagerTransfer;
} | {
    type: "TezosParametersManager";
    message: Messages.TezosParametersManager;
} | {
    type: "TezosTransactionOp";
    message: Messages.TezosTransactionOp;
} | {
    type: "TezosOriginationOp";
    message: Messages.TezosOriginationOp;
} | {
    type: "TezosDelegationOp";
    message: Messages.TezosDelegationOp;
} | {
    type: "TezosProposalOp";
    message: Messages.TezosProposalOp;
} | {
    type: "TezosBallotOp";
    message: Messages.TezosBallotOp;
} | {
    type: "TezosSignTx";
    message: Messages.TezosSignTx;
} | {
    type: "TezosSignedTx";
    message: Messages.TezosSignedTx;
}, ReadWriteError> | import("@trezor/transport/lib/types").AsyncResultWithTypedError<undefined, ReadWriteError>;
export declare const promptPassphrase: (device: Device) => Promise<PromptReturnType<"passphrase">>;
export declare const promptPin: (device: Device, type?: Messages.PinMatrixRequestType) => Promise<PromptReturnType<"pin">>;
export declare const promptWord: (device: Device, type: Messages.WordRequestType) => Promise<PromptReturnType<"word">>;
export {};
//# sourceMappingURL=prompts.d.ts.map