{
  "version": 3,
  "sources": ["../../@noble/hashes/src/sha512.ts", "../../@noble/curves/src/abstract/edwards.ts", "../../@noble/curves/src/abstract/montgomery.ts", "../../@noble/curves/src/ed25519.ts", "../../@solana/web3.js/node_modules/base-x/src/index.js", "../../@solana/web3.js/node_modules/bs58/index.js", "../../borsh/node_modules/base-x/src/index.js", "../../borsh/node_modules/bs58/index.js", "../../text-encoding-utf-8/src/encoding.js", "../../borsh/lib/index.js", "../../@solana/buffer-layout/src/Layout.ts", "../../bigint-buffer/dist/browser.js", "../../superstruct/src/error.ts", "../../superstruct/src/utils.ts", "../../superstruct/src/struct.ts", "../../superstruct/src/structs/utilities.ts", "../../superstruct/src/structs/types.ts", "../../superstruct/src/structs/coercions.ts", "../../superstruct/src/structs/refinements.ts", "../../uuid/dist/esm-browser/rng.js", "../../uuid/dist/esm-browser/regex.js", "../../uuid/dist/esm-browser/validate.js", "../../uuid/dist/esm-browser/stringify.js", "../../uuid/dist/esm-browser/v1.js", "../../uuid/dist/esm-browser/parse.js", "../../uuid/dist/esm-browser/v35.js", "../../uuid/dist/esm-browser/md5.js", "../../uuid/dist/esm-browser/v3.js", "../../uuid/dist/esm-browser/v4.js", "../../uuid/dist/esm-browser/sha1.js", "../../uuid/dist/esm-browser/v5.js", "../../uuid/dist/esm-browser/nil.js", "../../uuid/dist/esm-browser/version.js", "../../uuid/dist/esm-browser/index.js", "../../jayson/lib/generateRequest.js", "../../jayson/lib/client/browser/index.js", "../../eventemitter3/index.js", "../../eventemitter3/index.mjs", "../../rpc-websockets/node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js", "../../rpc-websockets/src/lib/client/websocket.browser.ts", "../../rpc-websockets/src/lib/client.ts", "../../rpc-websockets/src/lib/utils.ts", "../../rpc-websockets/src/index.browser.ts", "../../@solana/web3.js/src/utils/ed25519.ts", "../../@solana/web3.js/src/utils/to-buffer.ts", "../../@solana/web3.js/src/utils/borsh-schema.ts", "../../@solana/web3.js/src/publickey.ts", "../../@solana/web3.js/src/account.ts", "../../@solana/web3.js/src/bpf-loader-deprecated.ts", "../../@solana/web3.js/src/transaction/constants.ts", "../../@solana/web3.js/src/transaction/expiry-custom-errors.ts", "../../@solana/web3.js/src/message/account-keys.ts", "../../@solana/web3.js/src/layout.ts", "../../@solana/web3.js/src/utils/shortvec-encoding.ts", "../../@solana/web3.js/src/utils/assert.ts", "../../@solana/web3.js/src/message/compiled-keys.ts", "../../@solana/web3.js/src/utils/guarded-array-utils.ts", "../../@solana/web3.js/src/message/legacy.ts", "../../@solana/web3.js/src/message/v0.ts", "../../@solana/web3.js/src/message/versioned.ts", "../../@solana/web3.js/src/transaction/legacy.ts", "../../@solana/web3.js/src/transaction/message.ts", "../../@solana/web3.js/src/transaction/versioned.ts", "../../@solana/web3.js/src/timing.ts", "../../@solana/web3.js/src/sysvar.ts", "../../@solana/web3.js/src/errors.ts", "../../@solana/web3.js/src/utils/send-and-confirm-transaction.ts", "../../@solana/web3.js/src/utils/sleep.ts", "../../@solana/web3.js/src/instruction.ts", "../../@solana/web3.js/src/fee-calculator.ts", "../../@solana/web3.js/src/nonce-account.ts", "../../@solana/web3.js/src/utils/bigint.ts", "../../@solana/web3.js/src/programs/system.ts", "../../@solana/web3.js/src/loader.ts", "../../@solana/web3.js/src/bpf-loader.ts", "../../@solana/web3.js/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js", "../../@solana/web3.js/src/epoch-schedule.ts", "../../@solana/web3.js/src/__forks__/browser/fetch-impl.ts", "../../@solana/web3.js/src/rpc-websocket.ts", "../../@solana/web3.js/src/account-data.ts", "../../@solana/web3.js/src/programs/address-lookup-table/state.ts", "../../@solana/web3.js/src/utils/makeWebsocketUrl.ts", "../../@solana/web3.js/src/connection.ts", "../../@solana/web3.js/src/keypair.ts", "../../@solana/web3.js/src/programs/address-lookup-table/index.ts", "../../@solana/web3.js/src/programs/compute-budget.ts", "../../@solana/web3.js/src/programs/ed25519.ts", "../../@solana/web3.js/src/utils/secp256k1.ts", "../../@solana/web3.js/src/programs/secp256k1.ts", "../../@solana/web3.js/src/programs/stake.ts", "../../@solana/web3.js/src/programs/vote.ts", "../../@solana/web3.js/src/validator-info.ts", "../../@solana/web3.js/src/vote-account.ts", "../../@solana/web3.js/src/utils/cluster.ts", "../../@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts", "../../@solana/web3.js/src/index.ts"],
  "sourcesContent": ["/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\nimport { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { type CHash, wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0x6a09e667 | 0;\n  protected Al: number = 0xf3bcc908 | 0;\n  protected Bh: number = 0xbb67ae85 | 0;\n  protected Bl: number = 0x84caa73b | 0;\n  protected Ch: number = 0x3c6ef372 | 0;\n  protected Cl: number = 0xfe94f82b | 0;\n  protected Dh: number = 0xa54ff53a | 0;\n  protected Dl: number = 0x5f1d36f1 | 0;\n  protected Eh: number = 0x510e527f | 0;\n  protected El: number = 0xade682d1 | 0;\n  protected Fh: number = 0x9b05688c | 0;\n  protected Fl: number = 0x2b3e6c1f | 0;\n  protected Gh: number = 0x1f83d9ab | 0;\n  protected Gl: number = 0xfb41bd6b | 0;\n  protected Hh: number = 0x5be0cd19 | 0;\n  protected Hl: number = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy(): void {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0x8c3d37c8 | 0;\n  protected Al: number = 0x19544da2 | 0;\n  protected Bh: number = 0x73e19966 | 0;\n  protected Bl: number = 0x89dcd4d6 | 0;\n  protected Ch: number = 0x1dfab7ae | 0;\n  protected Cl: number = 0x32ff9c82 | 0;\n  protected Dh: number = 0x679dd514 | 0;\n  protected Dl: number = 0x582f9fcf | 0;\n  protected Eh: number = 0x0f6d2b69 | 0;\n  protected El: number = 0x7bd44da8 | 0;\n  protected Fh: number = 0x77e36f73 | 0;\n  protected Fl: number = 0x04c48942 | 0;\n  protected Gh: number = 0x3f9d85a8 | 0;\n  protected Gl: number = 0x6a1d36c8 | 0;\n  protected Hh: number = 0x1112e6ad | 0;\n  protected Hl: number = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0x22312194 | 0;\n  protected Al: number = 0xfc2bf72c | 0;\n  protected Bh: number = 0x9f555fa3 | 0;\n  protected Bl: number = 0xc84c64c2 | 0;\n  protected Ch: number = 0x2393b86b | 0;\n  protected Cl: number = 0x6f53b151 | 0;\n  protected Dh: number = 0x96387719 | 0;\n  protected Dl: number = 0x5940eabd | 0;\n  protected Eh: number = 0x96283ee2 | 0;\n  protected El: number = 0xa88effe3 | 0;\n  protected Fh: number = 0xbe5e1e25 | 0;\n  protected Fl: number = 0x53863992 | 0;\n  protected Gh: number = 0x2b0199fc | 0;\n  protected Gl: number = 0x2c85b8aa | 0;\n  protected Hh: number = 0x0eb72ddc | 0;\n  protected Hl: number = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0xcbbb9d5d | 0;\n  protected Al: number = 0xc1059ed8 | 0;\n  protected Bh: number = 0x629a292a | 0;\n  protected Bl: number = 0x367cd507 | 0;\n  protected Ch: number = 0x9159015a | 0;\n  protected Cl: number = 0x3070dd17 | 0;\n  protected Dh: number = 0x152fecd8 | 0;\n  protected Dl: number = 0xf70e5939 | 0;\n  protected Eh: number = 0x67332667 | 0;\n  protected El: number = 0xffc00b31 | 0;\n  protected Fh: number = 0x8eb44a87 | 0;\n  protected Fl: number = 0x68581511 | 0;\n  protected Gh: number = 0xdb0c2e0d | 0;\n  protected Gl: number = 0x64f98fa7 | 0;\n  protected Hh: number = 0x47b5481d | 0;\n  protected Hl: number = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\n/** SHA2-512 hash function. */\nexport const sha512: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexport const sha384: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n", "/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport { Field, mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, type FHash, type Hex, memoized } from './utils.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n/** Edwards curves must declare params a & d. */\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\nexport type CurveTypeWithLength = Readonly<CurveType & { nByteLength: number; nBitLength: number }>;\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType): CurveTypeWithLength {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n  _setWindowSize(windowSize: number): void;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n  msm(points: ExtPointType[], scalars: bigint[]): ExtPointType;\n}\n\n/**\n * Edwards Curve interface.\n * Main methods: `getPublicKey(priv)`, `sign(msg, priv)`, `verify(sig, msg, pub)`.\n */\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n};\n\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  // 0 <= n < MASK\n  // Coordinates larger than Fp.ORDER are allowed for zip215\n  function aCoordinate(title: string, n: bigint) {\n    ut.aInRange('coordinate ' + title, n, _0n, MASK);\n  }\n\n  function assertPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      aCoordinate('x', ex);\n      aCoordinate('y', ey);\n      aCoordinate('z', ez);\n      aCoordinate('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      aCoordinate('x', x);\n      aCoordinate('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      assertPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      assertPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = this.wNAF(n);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return I;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, iz);\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      ut.aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point: ExtPointType = Point.BASE): ExtPointType {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n", "/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport {\n  aInRange,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u: bigint, scalar: bigint): bigint {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, _0n, P);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    const len = bytes.length;\n    if (len !== montgomeryBytes && len !== fieldLen) {\n      let valid = '' + montgomeryBytes + ' or ' + fieldLen;\n      throw new Error('invalid scalar, expected ' + valid + ' bytes, got ' + len);\n    }\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n", "/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { type AffinePoint, type Group, pippenger } from './abstract/curve.js';\nimport { type CurveFn, type ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport {\n  createHasher,\n  expand_message_xmd,\n  type htfBasicOpts,\n  type HTFMethod,\n} from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery, type CurveFn as XCurveFn } from './abstract/montgomery.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  type Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP: string[] = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() =>\n  ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n  }) as const)();\n\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519: XCurveFn = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery: typeof edwardsToMontgomeryPub = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>): RistPoint {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  static msm(points: RistPoint[], scalars: bigint[]): RistPoint {\n    const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n    return pippenger(RistPoint, Fn, points, scalars);\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint: typeof RistPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts): RistPoint => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255: (msg: Uint8Array, options: htfBasicOpts) => RistPoint =\n  hashToRistretto255; // legacy\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n", null, "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n", null, null, null, null, null, null, null, "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "export default '00000000-0000-0000-0000-000000000000';", "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", "'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n", "'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "export { Buffer } from \"buffer\";\n", "/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\n\"use strict\"\n\nimport { EventEmitter } from \"eventemitter3\"\n\nimport {\n    BrowserWebSocketType,\n    NodeWebSocketType,\n    IWSClientAdditionalOptions,\n} from \"./client.types.js\"\n\nclass WebSocketBrowserImpl extends EventEmitter\n{\n    socket: BrowserWebSocketType\n\n    /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n    constructor(address: string, options: {}, protocols?: string | string[])\n    {\n        super()\n\n        this.socket = new window.WebSocket(address, protocols)\n\n        this.socket.onopen = () => this.emit(\"open\")\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data)\n        this.socket.onerror = (error) => this.emit(\"error\", error)\n        this.socket.onclose = (event) =>\n        {\n            this.emit(\"close\", event.code, event.reason)\n        }\n    }\n\n    /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n    send(\n        data: Parameters<BrowserWebSocketType[\"send\"]>[0],\n        optionsOrCallback: (\n      error?: Error\n    ) => void | Parameters<NodeWebSocketType[\"send\"]>[1],\n        callback?: () => void\n    )\n    {\n        const cb = callback || optionsOrCallback\n\n        try\n        {\n            this.socket.send(data)\n            cb()\n        }\n        catch (error)\n        {\n            cb(error)\n        }\n    }\n\n    /**\n   * Closes an underlying socket\n   * @method\n   * @param {Number} code - status code explaining why the connection is being closed\n   * @param {String} reason - a description why the connection is closing\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    close(code?: number, reason?: string)\n    {\n        this.socket.close(code, reason)\n    }\n\n    addEventListener<K extends keyof WebSocketEventMap>(\n        type: K,\n        listener: (ev: WebSocketEventMap[K]) => any,\n        options?: boolean | AddEventListenerOptions\n    ): void\n    {\n        this.socket.addEventListener(type, listener, options)\n    }\n}\n\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nexport function WebSocket(\n    address: string,\n    options: IWSClientAdditionalOptions\n)\n{\n    return new WebSocketBrowserImpl(address, options)\n}\n", "/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\n\"use strict\"\n\nimport NodeWebSocket from \"ws\"\nimport { EventEmitter } from \"eventemitter3\"\nimport {\n    ICommonWebSocket,\n    IWSClientAdditionalOptions,\n    NodeWebSocketType,\n    ICommonWebSocketFactory,\n} from \"./client/client.types.js\"\n\nimport { DataPack, DefaultDataPack } from \"./utils.js\"\n\ninterface IQueueElement {\n  promise: [\n    Parameters<ConstructorParameters<typeof Promise>[0]>[0],\n    Parameters<ConstructorParameters<typeof Promise>[0]>[1]\n  ];\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\nexport interface IQueue {\n  [x: number | string]: IQueueElement;\n}\n\nexport interface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\nexport class CommonClient extends EventEmitter\n{\n    private address: string\n    private rpc_id: number | string\n    private queue: IQueue\n    private options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    private autoconnect: boolean\n    private ready: boolean\n    private reconnect: boolean\n    private reconnect_timer_id: NodeJS.Timeout\n    private reconnect_interval: number\n    private max_reconnects: number\n    private rest_options: IWSClientAdditionalOptions &\n    NodeWebSocket.ClientOptions\n    private current_reconnects: number\n    private generate_request_id: (\n    method: string,\n    params: object | Array<any>\n  ) => number | string\n    private socket: ICommonWebSocket\n    private webSocketFactory: ICommonWebSocketFactory\n    private dataPack: DataPack<object, string>\n\n    /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n    constructor(\n        webSocketFactory: ICommonWebSocketFactory,\n        address = \"ws://localhost:8080\",\n        {\n            autoconnect = true,\n            reconnect = true,\n            reconnect_interval = 1000,\n            max_reconnects = 5,\n            ...rest_options\n        } = {},\n        generate_request_id?: (\n      method: string,\n      params: object | Array<any>\n    ) => number | string,\n        dataPack?: DataPack<object, string>\n    )\n    {\n        super()\n\n        this.webSocketFactory = webSocketFactory\n\n        this.queue = {}\n        this.rpc_id = 0\n\n        this.address = address\n        this.autoconnect = autoconnect\n        this.ready = false\n        this.reconnect = reconnect\n        this.reconnect_timer_id = undefined\n        this.reconnect_interval = reconnect_interval\n        this.max_reconnects = max_reconnects\n        this.rest_options = rest_options\n        this.current_reconnects = 0\n        this.generate_request_id = generate_request_id || (() => typeof this.rpc_id === \"number\"\n            ? ++this.rpc_id\n            : Number(this.rpc_id) + 1)\n\n        if (!dataPack) this.dataPack = new DefaultDataPack()\n        else this.dataPack = dataPack\n\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options,\n            })\n    }\n\n    /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n    connect()\n    {\n        if (this.socket) return\n\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options,\n        })\n    }\n\n    /**\n   * Calls a registered RPC method on server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object|Array} params - optional method parameters\n   * @param {Number} timeout - RPC reply timeout value\n   * @param {Object} ws_opts - options passed to ws\n   * @return {Promise}\n   */\n    call(\n        method: string,\n        params?: IWSRequestParams,\n        timeout?: number,\n        ws_opts?: Parameters<NodeWebSocketType[\"send\"]>[1]\n    )\n    {\n        if (!ws_opts && \"object\" === typeof timeout)\n        {\n            ws_opts = timeout\n            timeout = null\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const rpc_id = this.generate_request_id(method, params)\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id,\n            }\n\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) =>\n            {\n                if (error) return reject(error)\n\n                this.queue[rpc_id] = { promise: [resolve, reject] }\n\n                if (timeout)\n                {\n                    this.queue[rpc_id].timeout = setTimeout(() =>\n                    {\n                        delete this.queue[rpc_id]\n                        reject(new Error(\"reply timeout\"))\n                    }, timeout)\n                }\n            })\n        })\n    }\n\n    /**\n   * Logins with the other side of the connection.\n   * @method\n   * @param {Object} params - Login credentials object\n   * @return {Promise}\n   */\n    async login(params: IWSRequestParams)\n    {\n        const resp = await this.call(\"rpc.login\", params)\n\n        if (!resp) throw new Error(\"authentication failed\")\n\n        return resp\n    }\n\n    /**\n   * Fetches a list of client's methods registered on server.\n   * @method\n   * @return {Array}\n   */\n    async listMethods()\n    {\n        return await this.call(\"__listMethods\")\n    }\n\n    /**\n   * Sends a JSON-RPC 2.0 notification to server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object} params - optional method parameters\n   * @return {Promise}\n   */\n    notify(method: string, params?: IWSRequestParams)\n    {\n        return new Promise<void>((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params,\n            }\n\n            this.socket.send(this.dataPack.encode(message), (error) =>\n            {\n                if (error) return reject(error)\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n   * Subscribes for a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async subscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.on\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\n                \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n            )\n\n        return result\n    }\n\n    /**\n   * Unsubscribes from a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async unsubscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.off\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result)\n\n        return result\n    }\n\n    /**\n   * Closes a WebSocket connection gracefully.\n   * @method\n   * @param {Number} code - socket close code\n   * @param {String} data - optional data to be sent before closing\n   * @return {Undefined}\n   */\n    close(code?: number, data?: string)\n    {\n        this.socket.close(code || 1000, data)\n    }\n\n    /**\n   * Enable / disable automatic reconnection.\n   * @method\n   * @param {Boolean} reconnect - enable / disable reconnection\n   * @return {Undefined}\n   */\n    setAutoReconnect(reconnect: boolean)\n    {\n        this.reconnect = reconnect\n    }\n\n    /**\n   * Set the interval between reconnection attempts.\n   * @method\n   * @param {Number} interval - reconnection interval in milliseconds\n   * @return {Undefined}\n   */\n    setReconnectInterval(interval: number)\n    {\n        this.reconnect_interval = interval\n    }\n\n    /**\n   * Set the maximum number of reconnection attempts.\n   * @method\n   * @param {Number} max_reconnects - maximum reconnection attempts\n   * @return {Undefined}\n   */\n    setMaxReconnects(max_reconnects: number)\n    {\n        this.max_reconnects = max_reconnects\n    }\n\n    /**\n   * Connection/Message handler.\n   * @method\n   * @private\n   * @param {String} address - WebSocket API address\n   * @param {Object} options - ws options object\n   * @return {Undefined}\n   */\n    private _connect(\n        address: string,\n        options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    )\n    {\n        clearTimeout(this.reconnect_timer_id)\n        this.socket = this.webSocketFactory(address, options)\n\n        this.socket.addEventListener(\"open\", () =>\n        {\n            this.ready = true\n            this.emit(\"open\")\n            this.current_reconnects = 0\n        })\n\n        this.socket.addEventListener(\"message\", ({ data: message }) =>\n        {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString()\n\n            try\n            {\n                message = this.dataPack.decode(message)\n            }\n            catch (error)\n            {\n                return\n            }\n\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length)\n            {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification)\n\n                const args = [message.notification]\n\n                if (message.params.constructor === Object) args.push(message.params)\n                // using for-loop instead of unshift/spread because performance is better\n                else\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i])\n\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() =>\n                {\n                    // eslint-disable-next-line prefer-spread\n                    this.emit.apply(this, args)\n                })\n            }\n\n            if (!this.queue[message.id])\n            {\n                // general JSON RPC 2.0 events\n                if (message.method)\n                {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() =>\n                    {\n                        this.emit(message.method, message?.params)\n                    })\n                }\n\n                return\n            }\n\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](\n                    new Error(\n                        \"Server response malformed. Response must include either \\\"result\\\"\" +\n              \" or \\\"error\\\", but not both.\"\n                    )\n                )\n\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout)\n\n            if (message.error) this.queue[message.id].promise[1](message.error)\n            else this.queue[message.id].promise[0](message.result)\n\n            delete this.queue[message.id]\n        })\n\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error))\n\n        this.socket.addEventListener(\"close\", ({ code, reason }) =>\n        {\n            if (this.ready)\n            // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0)\n\n            this.ready = false\n            this.socket = undefined\n\n            if (code === 1000) return\n\n            this.current_reconnects++\n\n            if (\n                this.reconnect &&\n        (this.max_reconnects > this.current_reconnects ||\n          this.max_reconnects === 0)\n            )\n                this.reconnect_timer_id = setTimeout(\n                    () => this._connect(address, options),\n                    this.reconnect_interval\n                )\n        })\n    }\n}\n", "\"use strict\"\n\nexport interface DataPack<\n  T,\n  R extends string | ArrayBufferLike | Blob | ArrayBufferView\n> {\n  encode(value: T): R;\n  decode(value: R): T;\n}\n\nexport class DefaultDataPack implements DataPack<Object, string>\n{\n    encode(value: Object): string\n    {\n        return JSON.stringify(value)\n    }\n\n    decode(value: string): Object\n    {\n        return JSON.parse(value)\n    }\n}\n", "\"use strict\"\n\nimport { WebSocket } from \"./lib/client/websocket.browser.js\"\nimport { CommonClient } from \"./lib/client.js\"\nimport { IWSClientAdditionalOptions } from \"./lib/client/client.types.js\"\n\nexport class Client extends CommonClient\n{\n    constructor(\n        address = \"ws://localhost:8080\",\n        {\n            autoconnect = true,\n            reconnect = true,\n            reconnect_interval = 1000,\n            max_reconnects = 5,\n        }: IWSClientAdditionalOptions = {},\n        generate_request_id?: (\n      method: string,\n      params: object | Array<any>\n    ) => number | string\n    )\n    {\n        super(\n            WebSocket,\n            address,\n            {\n                autoconnect,\n                reconnect,\n                reconnect_interval,\n                max_reconnects,\n            },\n            generate_request_id\n        )\n    }\n}\n\nexport * from \"./lib/client.js\"\nexport * from \"./lib/client/websocket.browser.js\"\nexport * from \"./lib/client/client.types.js\"\nexport * from \"./lib/utils.js\"\n", "import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n", "import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n", "import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n", "import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n", "import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n", "import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n", "/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n", "export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n", "import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n", "export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n", "export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n", "const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n", "import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n", "import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n", "import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n", "// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n", "import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n", "import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n", "import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n", "import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n", "var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n", "const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n", "export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n", "import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n", "const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n", "import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  programId?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const {\n      context,\n      value: {blockhash},\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature(): number {\n        throw new Error(\n          'The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' +\n            'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' +\n            'for a given message.',\n        );\n      },\n      toJSON() {\n        return {};\n      },\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator,\n      },\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                console.error(\n                  `Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``,\n                  {\n                    args,\n                    error: e,\n                  },\n                );\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n", "import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n", "import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n", "const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n", "import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],
  "mappings": "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",
  "names": ["import_dist", "offset", "Fp", "randomBytes", "uvRatio", "adjustScalarBytes", "G", "A", "B", "F", "C", "D", "E", "H", "X3", "Y3", "T3", "Z3", "f", "cofactor", "getPublicKey", "concatBytes", "sign", "verify", "publicKey", "import_dist", "init_utils", "validateOpts", "adjustScalarBytes", "_0n", "_1n", "publicKey", "import_dist", "init_utils", "_2n", "_1n", "v3", "pow", "_8n", "mod", "import_dist", "_0n", "init_utils", "number", "import_dist", "encode", "i", "j", "decode", "string", "import_dist", "require_src", "import_dist", "encode", "i", "j", "decode", "string", "require_bs58", "import_dist", "TextDecoder", "string", "offset", "import_dist", "import_dist", "mod", "array", "string", "serialize", "deserialize", "deserializeUnchecked", "import_dist", "offset", "span", "union", "Boolean", "import_dist", "toBigIntLE", "toBufferLE", "struct", "type", "coerce", "mask", "tuple", "import_dist", "init_dist", "import_dist", "import_dist", "validate", "import_dist", "offset", "import_dist", "offset", "import_dist", "import_dist", "version", "offset", "import_dist", "import_dist", "import_dist", "offset", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "version", "require_browser", "import_dist", "err", "import_dist", "EventEmitter", "import_dist", "EventEmitter", "EventEmitter", "type", "isOnCurve", "publicKey", "ed25519", "ExtendedPoint", "fromHex", "isPublicKeyData", "value", "_bn", "undefined", "getAlloc", "type", "fields", "getItemAlloc", "item", "span", "alloc", "property", "field", "Array", "isArray", "length", "elementLayout", "layout", "forEach", "decodeLength", "bytes", "len", "size", "elem", "shift", "encodeLength", "rem_len", "push", "assert", "condition", "message", "Error", "guardedShift", "byteArray", "END_OF_BUFFER_ERROR_MESSAGE", "guardedSplice", "args", "start", "splice", "sendAndConfirmTransaction", "connection", "transaction", "signers", "options", "sendOptions", "skipPreflight", "preflightCommitment", "commitment", "maxRetries", "minContextSlot", "signature", "sendTransaction", "status", "recentBlockhash", "lastValidBlockHeight", "confirmTransaction", "abortSignal", "blockhash", "minNonceContextSlot", "nonceInfo", "nonceInstruction", "nonceAccountPubkey", "keys", "pubkey", "nonceValue", "nonce", "console", "warn", "err", "SendTransactionError", "action", "transactionMessage", "JSON", "stringify", "sleep", "ms", "Promise", "resolve", "setTimeout", "encodeData", "allocLength", "Layout", "data", "Buffer", "layoutFields", "Object", "assign", "instruction", "index", "encode", "decodeData", "buffer", "decode", "fastStableStringify", "trailingZeros", "n", "nextPowerOfTwo", "decoded", "typeIndex", "makeWebsocketUrl", "endpoint", "matches", "match", "URL_RE", "TypeError", "_", "hostish", "portWithColon", "rest", "protocol", "startsWith", "startPort", "parseInt", "slice", "websocketPort", "assertEndpointUrl", "putativeUrl", "test", "extractCommitmentFromConfig", "commitmentOrConfig", "config", "specifiedCommitment", "specifiedConfig", "applyDefaultMemcmpEncodingToFilters", "filters", "map", "filter", "memcmp", "encoding", "createRpcResult", "result", "union", "pick", "jsonrpc", "literal", "id", "string", "error", "code", "unknown", "optional", "any", "jsonRpcResult", "schema", "coerce", "UnknownRpcResult", "create", "jsonRpcResultAndContext", "context", "slot", "number", "notificationResultAndContext", "versionedMessageFromResponse", "version", "response", "MessageV0", "header", "staticAccountKeys", "accountKeys", "accountKey", "PublicKey", "compiledInstructions", "instructions", "ix", "programIdIndex", "accountKeyIndexes", "accounts", "bs58", "addressTableLookups", "Message", "createRpcClient", "url", "httpHeaders", "customFetch", "fetchMiddleware", "disableRetryOnRateLimit", "httpAgent", "fetch", "fetchImpl", "agent", "fetchWithMiddleware", "info", "init", "modifiedFetchArgs", "reject", "modifiedInfo", "modifiedInit", "clientBrowser", "RpcClient", "request", "callback", "method", "body", "headers", "COMMON_HTTP_HEADERS", "too_many_requests_retries", "res", "waitTime", "statusText", "text", "ok", "createRpcRequest", "client", "createRpcBatchRequest", "requests", "batch", "params", "methodName", "parseAuthorizedVoter", "authorizedVoter", "epoch", "parsePriorVoters", "authorizedPubkey", "epochOfLastAuthorizedSwitch", "targetEpoch", "getPriorVoters", "buf", "idx", "isEmpty", "clusterApiUrl", "cluster", "tls", "key", "sendAndConfirmRawTransaction", "rawTransaction", "confirmationStrategyOrConfirmOptions", "maybeConfirmOptions", "confirmationStrategy", "prototype", "hasOwnProperty", "call", "sendRawTransaction", "confirmationPromise", "generatePrivateKey", "generateKeypair", "getPublicKey", "sign", "verify", "toBuffer", "Struct", "Enum", "SOLANA_SCHEMA", "MAX_SEED_LENGTH", "PUBLIC_KEY_LENGTH", "uniquePublicKeyCounter", "Account", "BPF_LOADER_DEPRECATED_PROGRAM_ID", "PACKET_DATA_SIZE", "VERSION_PREFIX_MASK", "SIGNATURE_LENGTH_IN_BYTES", "TransactionExpiredBlockheightExceededError", "TransactionExpiredTimeoutError", "TransactionExpiredNonceInvalidError", "MessageAccountKeys", "rustString", "authorized", "lockup", "voteInit", "voteAuthorizeWithSeedArgs", "CompiledKeys", "VersionedMessage", "TransactionStatus", "DEFAULT_SIGNATURE", "TransactionInstruction", "Transaction", "TransactionMessage", "VersionedTransaction", "NUM_TICKS_PER_SECOND", "DEFAULT_TICKS_PER_SLOT", "NUM_SLOTS_PER_SECOND", "MS_PER_SLOT", "SYSVAR_CLOCK_PUBKEY", "SYSVAR_EPOCH_SCHEDULE_PUBKEY", "SYSVAR_INSTRUCTIONS_PUBKEY", "SYSVAR_RECENT_BLOCKHASHES_PUBKEY", "SYSVAR_RENT_PUBKEY", "SYSVAR_REWARDS_PUBKEY", "SYSVAR_SLOT_HASHES_PUBKEY", "SYSVAR_SLOT_HISTORY_PUBKEY", "SYSVAR_STAKE_HISTORY_PUBKEY", "SolanaJSONRPCErrorCode", "SolanaJSONRPCError", "FeeCalculatorLayout", "NonceAccountLayout", "NONCE_ACCOUNT_LENGTH", "NonceAccount", "encodeDecode", "bigInt", "u64", "SystemInstruction", "SYSTEM_INSTRUCTION_LAYOUTS", "SystemProgram", "CHUNK_SIZE", "Loader", "BPF_LOADER_PROGRAM_ID", "BpfLoader", "MINIMUM_SLOT_PER_EPOCH", "EpochSchedule", "RpcWebSocketClient", "LOOKUP_TABLE_META_SIZE", "AddressLookupTableAccount", "LookupTableMetaLayout", "PublicKeyFromString", "RawAccountDataResult", "BufferFromRawAccountData", "BLOCKHASH_CACHE_TIMEOUT_MS", "GetInflationGovernorResult", "GetInflationRewardResult", "GetRecentPrioritizationFeesResult", "GetInflationRateResult", "GetEpochInfoResult", "GetEpochScheduleResult", "GetLeaderScheduleResult", "TransactionErrorResult", "SignatureStatusResult", "SignatureReceivedResult", "VersionResult", "ParsedInstructionStruct", "PartiallyDecodedInstructionStruct", "SimulatedTransactionResponseStruct", "BlockProductionResponseStruct", "GetInflationGovernorRpcResult", "GetInflationRateRpcResult", "GetRecentPrioritizationFeesRpcResult", "GetEpochInfoRpcResult", "GetEpochScheduleRpcResult", "GetLeaderScheduleRpcResult", "SlotRpcResult", "GetSupplyRpcResult", "TokenAmountResult", "GetTokenLargestAccountsResult", "GetTokenAccountsByOwner", "ParsedAccountDataResult", "GetParsedTokenAccountsByOwner", "GetLargestAccountsRpcResult", "AccountInfoResult", "KeyedAccountInfoResult", "ParsedOrRawAccountData", "ParsedAccountInfoResult", "KeyedParsedAccountInfoResult", "StakeActivationResult", "GetConfirmedSignaturesForAddress2RpcResult", "GetSignaturesForAddressRpcResult", "AccountNotificationResult", "ProgramAccountInfoResult", "ProgramAccountNotificationResult", "SlotInfoResult", "SlotNotificationResult", "SlotUpdateResult", "SlotUpdateNotificationResult", "SignatureNotificationResult", "RootNotificationResult", "ContactInfoResult", "VoteAccountInfoResult", "GetVoteAccounts", "ConfirmationStatus", "SignatureStatusResponse", "GetSignatureStatusesRpcResult", "GetMinimumBalanceForRentExemptionRpcResult", "AddressTableLookupStruct", "ConfirmedTransactionResult", "AnnotatedAccountKey", "ConfirmedTransactionAccountsModeResult", "ParsedInstructionResult", "RawInstructionResult", "InstructionResult", "UnknownInstructionResult", "ParsedOrRawInstruction", "ParsedConfirmedTransactionResult", "TokenBalanceResult", "LoadedAddressesResult", "ConfirmedTransactionMetaResult", "ParsedConfirmedTransactionMetaResult", "TransactionVersionStruct", "RewardsResult", "GetBlockRpcResult", "GetNoneModeBlockRpcResult", "GetAccountsModeBlockRpcResult", "GetParsedBlockRpcResult", "GetParsedAccountsModeBlockRpcResult", "GetParsedNoneModeBlockRpcResult", "GetConfirmedBlockRpcResult", "GetBlockSignaturesRpcResult", "GetTransactionRpcResult", "GetParsedTransactionRpcResult", "GetLatestBlockhashRpcResult", "IsBlockhashValidRpcResult", "PerfSampleResult", "GetRecentPerformanceSamplesRpcResult", "GetFeeCalculatorRpcResult", "RequestAirdropRpcResult", "SendTransactionRpcResult", "LogsResult", "LogsNotificationResult", "Connection", "Keypair", "LOOKUP_TABLE_INSTRUCTION_LAYOUTS", "AddressLookupTableInstruction", "AddressLookupTableProgram", "ComputeBudgetInstruction", "COMPUTE_BUDGET_INSTRUCTION_LAYOUTS", "ComputeBudgetProgram", "PRIVATE_KEY_BYTES", "PUBLIC_KEY_BYTES", "SIGNATURE_BYTES", "ED25519_INSTRUCTION_LAYOUT", "Ed25519Program", "ecdsaSign", "publicKeyCreate", "ETHEREUM_ADDRESS_BYTES", "SIGNATURE_OFFSETS_SERIALIZED_SIZE", "SECP256K1_INSTRUCTION_LAYOUT", "Secp256k1Program", "STAKE_CONFIG_ID", "Authorized", "Lockup", "StakeInstruction", "STAKE_INSTRUCTION_LAYOUTS", "StakeAuthorizationLayout", "StakeProgram", "VoteInit", "VoteInstruction", "VOTE_INSTRUCTION_LAYOUTS", "VoteAuthorizationLayout", "VoteProgram", "VALIDATOR_INFO_KEY", "InfoString", "ValidatorInfo", "VOTE_PROGRAM_ID", "VoteAccountLayout", "VoteAccount", "LAMPORTS_PER_SOL", "utils", "randomPrivateKey", "privateScalar", "secretKey", "Uint8Array", "set", "arr", "isBuffer", "from", "byteOffset", "byteLength", "constructor", "properties", "serialize", "deserialize", "decodeUnchecked", "deserializeUnchecked", "enum", "Map", "BN", "unique", "equals", "eq", "toBase58", "toBytes", "toJSON", "b", "toArrayLike", "zeroPad", "copy", "Symbol", "toStringTag", "toString", "createWithSeed", "fromPublicKey", "seed", "programId", "concat", "publicKeyBytes", "sha256", "createProgramAddressSync", "seeds", "createProgramAddress", "findProgramAddressSync", "address", "seedsWithNonce", "findProgramAddress", "pubkeyData", "_PublicKey", "default", "kind", "_publicKey", "_secretKey", "secretKeyBuffer", "defineProperty", "timeoutSeconds", "toFixed", "accountKeysFromLookups", "keySegments", "writable", "readonly", "get", "keySegment", "flat", "compileInstructions", "U8_MAX", "keyIndexMap", "findKeyIndex", "keyIndex", "meta", "blob", "rsl", "struct", "u32", "offset", "_decode", "bind", "_encode", "rslShim", "str", "chars", "ns64", "u8", "payer", "keyMetaMap", "compile", "getOrInsertDefault", "keyMeta", "isSigner", "isWritable", "isInvoked", "payerKeyMeta", "accountMeta", "getMessageComponents", "mapEntries", "entries", "writableSigners", "readonlySigners", "writableNonSigners", "readonlyNonSigners", "numRequiredSignatures", "numReadonlySignedAccounts", "numReadonlyUnsignedAccounts", "payerAddress", "extractTableLookup", "lookupTable", "writableIndexes", "drainedWritableKeys", "drainKeysFoundInLookupTable", "state", "addresses", "readonlyIndexes", "drainedReadonlyKeys", "lookupTableEntries", "keyMetaFilter", "lookupTableIndexes", "drainedKeys", "lookupTableIndex", "findIndex", "entry", "delete", "indexToProgramIds", "account", "getAccountKeys", "compiledKeys", "payerKey", "isAccountSigner", "isAccountWritable", "numSignedAccounts", "unsignedAccountIndex", "numUnsignedAccounts", "numWritableUnsignedAccounts", "numWritableSignedAccounts", "isProgramId", "has", "programIds", "values", "nonProgramIds", "numKeys", "keyCount", "shortvec", "keyIndicesCount", "dataCount", "keyIndices", "dataLength", "instructionCount", "instructionBuffer", "instructionBufferLength", "instructionLayout", "seq", "signDataLayout", "signData", "accountCount", "i", "dataSlice", "messageArgs", "numAccountKeysFromLookups", "count", "lookup", "addressLookupTableAccounts", "resolveAddressTableLookups", "numStaticAccountKeys", "lookupAccountKeysIndex", "numWritableLookupAccountKeys", "reduce", "tableLookup", "tableAccount", "find", "lookupTableAccounts", "extractResult", "addressTableLookup", "encodedStaticAccountKeysLength", "serializedInstructions", "serializeInstructions", "encodedInstructionsLength", "serializedAddressTableLookups", "serializeAddressTableLookups", "encodedAddressTableLookupsLength", "messageLayout", "serializedMessage", "MESSAGE_VERSION_0_PREFIX", "serializedMessageLength", "prefix", "staticAccountKeysLength", "instructionsLength", "addressTableLookupsLength", "serializedLength", "encodedAccountKeyIndexesLength", "encodedDataLength", "encodedWritableIndexesLength", "encodedReadonlyIndexesLength", "addressTableLookupLayout", "maskedPrefix", "accountKeyIndexesLength", "addressTableLookupsCount", "writableIndexesLength", "readonlyIndexesLength", "deserializeMessageVersion", "fill", "opts", "signatures", "feePayer", "_message", "_json", "add", "items", "compileMessage", "accountMetas", "includes", "uniqueMetas", "pubkeyString", "uniqueIndex", "x", "sort", "y", "localeMatcher", "usage", "sensitivity", "ignorePunctuation", "numeric", "caseFirst", "localeCompare", "feePayerIndex", "payerMeta", "unshift", "signedKeys", "unsignedKeys", "indexOf", "invariant", "_compile", "valid", "every", "pair", "serializeMessage", "getEstimatedFee", "getFeeForMessage", "setSigners", "seen", "Set", "uniqueSigners", "signer", "_partialSign", "partialSign", "_addSignature", "addSignature", "sigpair", "verifySignatures", "requireAllSignatures", "signatureErrors", "_getMessageSignednessErrors", "errors", "missing", "invalid", "sigErrors", "errorMessage", "p", "join", "_serialize", "signatureCount", "transactionLength", "wireTransaction", "keyObj", "populate", "sigPubkeyPair", "some", "decompile", "compiledIx", "compileToLegacyMessage", "compileToV0Message", "defaultSignatures", "encodedSignaturesLength", "transactionLayout", "serializedTransaction", "serializedTransactionLength", "signaturesLength", "messageData", "signerPubkeys", "signerIndex", "logs", "maybeLogsOutput", "guideText", "a", "transactionLogs", "transactionError", "cachedLogs", "getLogs", "getTransaction", "then", "tx", "logMessages", "catch", "JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP", "JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE", "JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE", "JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE", "JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY", "JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE", "JSON_RPC_SERVER_ERROR_SLOT_SKIPPED", "JSON_RPC_SERVER_ERROR_NO_SNAPSHOT", "JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED", "JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX", "JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE", "JSON_RPC_SCAN_ERROR", "JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH", "JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET", "JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION", "JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED", "customMessage", "name", "nu64", "feeCalculator", "fromAccountData", "nonceAccount", "bigIntLayout", "src", "toBigIntLE", "toBufferLE", "decodeInstructionType", "checkProgramId", "instructionTypeLayout", "ixType", "decodeCreateAccount", "checkKeyLength", "lamports", "space", "Create", "fromPubkey", "newAccountPubkey", "decodeTransfer", "Transfer", "toPubkey", "decodeTransferWithSeed", "TransferWithSeed", "basePubkey", "decodeAllocate", "Allocate", "accountPubkey", "decodeAllocateWithSeed", "base", "AllocateWithSeed", "decodeAssign", "Assign", "decodeAssignWithSeed", "AssignWithSeed", "decodeCreateWithSeed", "CreateWithSeed", "decodeNonceInitialize", "InitializeNonceAccount", "noncePubkey", "decodeNonceAdvance", "AdvanceNonceAccount", "decodeNonceWithdraw", "WithdrawNonceAccount", "decodeNonceAuthorize", "AuthorizeNonceAccount", "newAuthorizedPubkey", "expectedLength", "freeze", "UpgradeNonceAccount", "createAccount", "transfer", "BigInt", "createAccountWithSeed", "createNonceAccount", "initParams", "nonceInitialize", "instructionData", "nonceAdvance", "nonceWithdraw", "nonceAuthorize", "allocate", "getMinNumSignatures", "Math", "ceil", "chunkSize", "load", "program", "balanceNeeded", "getMinimumBalanceForRentExemption", "programInfo", "getAccountInfo", "executable", "owner", "dataLayout", "array", "transactions", "bytesLength", "bytesLengthPadding", "_rpcEndpoint", "REQUESTS_PER_SECOND", "all", "deployCommitment", "finalizeSignature", "currentSlot", "getSlot", "round", "elf", "loaderProgramId", "slotsPerEpoch", "leaderScheduleSlotOffset", "warmup", "firstNormalEpoch", "firstNormalSlot", "getEpoch", "getEpochAndSlotIndex", "epochLen", "getSlotsInEpoch", "slotIndex", "normalSlotIndex", "normalEpochIndex", "floor", "getFirstSlotInEpoch", "pow", "getLastSlotInEpoch", "globalThis", "CommonClient", "generate_request_id", "webSocketFactory", "rpc", "createRpc", "autoconnect", "max_reconnects", "reconnect", "reconnect_interval", "underlyingSocket", "socket", "readyState", "notify", "isActive", "U64_MAX", "deactivationSlot", "accountData", "serializedAddressesLen", "numSerializedAddresses", "lastExtendedSlot", "lastExtendedSlotStartIndex", "lastExtendedStartIndex", "authority", "instance", "tuple", "foundation", "foundationTerm", "initial", "taper", "terminal", "nullable", "effectiveSlot", "amount", "postBalance", "commission", "prioritizationFee", "total", "validator", "slotsInEpoch", "absoluteSlot", "blockHeight", "transactionCount", "boolean", "record", "parsed", "rentEpoch", "unitsConsumed", "returnData", "innerInstructions", "byIdentity", "range", "firstSlot", "lastSlot", "circulating", "nonCirculating", "nonCirculatingAccounts", "uiAmount", "decimals", "uiAmountString", "active", "inactive", "memo", "blockTime", "subscription", "parent", "root", "timestamp", "stats", "numTransactionEntries", "numSuccessfulTransactions", "numFailedTransactions", "maxTransactionsPerEntry", "gossip", "tpu", "votePubkey", "nodePubkey", "activatedStake", "epochVoteAccount", "epochCredits", "lastVote", "rootSlot", "current", "delinquent", "confirmations", "confirmationStatus", "source", "accountIndex", "mint", "uiTokenAmount", "fee", "preBalances", "postBalances", "preTokenBalances", "postTokenBalances", "loadedAddresses", "computeUnitsConsumed", "rewardType", "previousBlockhash", "parentSlot", "rewards", "numTransactions", "numSlots", "samplePeriodSecs", "lamportsPerSignature", "process", "_commitment", "_confirmTransactionInitialTimeout", "_rpcWsEndpoint", "_rpcClient", "_rpcRequest", "_rpcBatchRequest", "_rpcWebSocket", "_rpcWebSocketConnected", "_rpcWebSocketHeartbeat", "_rpcWebSocketIdleTimeout", "_rpcWebSocketGeneration", "_disableBlockhashCaching", "_pollingBlockhash", "_blockhashInfo", "latestBlockhash", "lastFetch", "transactionSignatures", "simulatedSignatures", "_nextClientSubscriptionId", "_subscriptionDisposeFunctionsByClientSubscriptionId", "_subscriptionHashByClientSubscriptionId", "_subscriptionStateChangeCallbacksByHash", "_subscriptionCallbacksByServerSubscriptionId", "_subscriptionsByHash", "_subscriptionsAutoDisposedByRpc", "getBlockHeight", "requestPromises", "_buildArgs", "requestHash", "unsafeRes", "wsEndpoint", "confirmTransactionInitialTimeout", "Infinity", "on", "_wsOnOpen", "_wsOnError", "_wsOnClose", "_wsOnAccountNotification", "_wsOnProgramAccountNotification", "_wsOnSlotNotification", "_wsOnSlotUpdatesNotification", "_wsOnSignatureNotification", "_wsOnRootNotification", "_wsOnLogsNotification", "rpcEndpoint", "getBalanceAndContext", "getBalance", "e", "getBlockTime", "getMinimumLedgerSlot", "getFirstAvailableBlock", "getSupply", "configArg", "getTokenSupply", "tokenMintAddress", "getTokenAccountBalance", "tokenAddress", "getTokenAccountsByOwner", "ownerAddress", "_args", "getParsedTokenAccountsByOwner", "getLargestAccounts", "arg", "getTokenLargestAccounts", "mintAddress", "getAccountInfoAndContext", "getParsedAccountInfo", "getMultipleParsedAccounts", "publicKeys", "rawConfig", "getMultipleAccountsInfoAndContext", "getMultipleAccountsInfo", "getStakeActivation", "getProgramAccounts", "configOrCommitment", "configWithoutEncoding", "baseSchema", "withContext", "getParsedProgramAccounts", "strategy", "rawSignature", "aborted", "reason", "decodedSignature", "confirmTransactionUsingLegacyTimeoutStrategy", "confirmTransactionUsingBlockHeightExceedanceStrategy", "confirmTransactionUsingDurableNonceStrategy", "getCancellationPromise", "signal", "addEventListener", "getTransactionConfirmationPromise", "signatureSubscriptionId", "disposeSignatureSubscriptionStateChangeObserver", "done", "onSignature", "__type", "PROCESSED", "subscriptionSetupPromise", "resolveSubscriptionSetup", "_onSubscriptionStateChange", "nextState", "getSignatureStatus", "abortConfirmation", "removeSignatureListener", "expiryPromise", "checkBlockHeight", "_e", "currentBlockHeight", "BLOCKHEIGHT_EXCEEDED", "cancellationPromise", "outcome", "race", "currentNonceValue", "lastCheckedSlot", "getCurrentNonceValue", "getNonceAndContext", "NONCE_INVALID", "slotInWhichNonceDidAdvance", "signatureStatus", "commitmentForStatus", "timeoutId", "timeoutMs", "TIMED_OUT", "clearTimeout", "getClusterNodes", "getVoteAccounts", "getSlotLeader", "getSlotLeaders", "startSlot", "limit", "getSignatureStatuses", "getTransactionCount", "getTotalSupply", "excludeNonCirculatingAccountsList", "getInflationGovernor", "getInflationReward", "getInflationRate", "getEpochInfo", "getEpochSchedule", "epochSchedule", "getLeaderSchedule", "getRecentBlockhashAndContext", "getLatestBlockhashAndContext", "getRecentPerformanceSamples", "getFeeCalculatorForBlockhash", "wireMessage", "getRecentPrioritizationFees", "lockedWritableAccounts", "getRecentBlockhash", "getLatestBlockhash", "isBlockhashValid", "getVersion", "getGenesisHash", "getBlock", "_buildArgsAtLeastConfirmed", "transactionDetails", "getParsedBlock", "getBlockProduction", "extra", "c", "getParsedTransaction", "getParsedTransactions", "getTransactions", "getConfirmedBlock", "block", "getBlocks", "endSlot", "getBlockSignatures", "getConfirmedBlockSignatures", "getConfirmedTransaction", "getParsedConfirmedTransaction", "getParsedConfirmedTransactions", "getConfirmedSignaturesForAddress", "firstAvailableBlock", "until", "highestConfirmedRoot", "before", "confirmedSignatureInfo", "getConfirmedSignaturesForAddress2", "getSignaturesForAddress", "getAddressLookupTable", "accountInfo", "getNonce", "requestAirdrop", "to", "_blockhashWithExpiryBlockHeight", "disableCache", "timeSinceFetch", "Date", "now", "expired", "_pollNewBlockhash", "startTime", "cachedLatestBlockhash", "cachedBlockhash", "getStakeMinimumDelegation", "simulateTransaction", "transactionOrMessage", "configOrSigners", "includeAccounts", "versionedTx", "encodedTransaction", "originalTx", "sigVerify", "traceIndent", "logTrace", "signersOrOptions", "sendEncodedTransaction", "setInterval", "_updateSubscriptions", "Number", "MAX_SAFE_INTEGER", "clearInterval", "hash", "_setSubscription", "nextSubscription", "prevState", "stateChangeCallbacks", "cb", "clientSubscriptionId", "close", "log", "connect", "activeWebSocketGeneration", "isCurrentConnectionStillActive", "callbacks", "serverSubscriptionId", "unsubscribeMethod", "_handleServerNotification", "callbackArgs", "notification", "_makeSubscription", "subscriptionConfig", "existingSubscription", "onAccountChange", "removeAccountChangeListener", "_unsubscribeClientSubscription", "accountId", "onProgramAccountChange", "maybeFilters", "removeProgramAccountChangeListener", "onLogs", "mentions", "removeOnLogsListener", "onSlotChange", "removeSlotChangeListener", "onSlotUpdate", "removeSlotUpdateListener", "subscriptionName", "dispose", "override", "_err", "onSignatureWithOptions", "onRootChange", "removeRootChangeListener", "keypair", "_keypair", "generate", "fromSecretKey", "skipValidation", "computedPublicKey", "ii", "fromSeed", "CreateLookupTable", "bigintLayout", "FreezeLookupTable", "ExtendLookupTable", "DeactivateLookupTable", "CloseLookupTable", "layoutType", "decodeCreateLookupTable", "checkKeysLength", "recentSlot", "decodeExtendLookupTable", "decodeCloseLookupTable", "recipient", "decodeFreezeLookupTable", "decodeDeactivateLookupTable", "createLookupTable", "lookupTableAddress", "bumpSeed", "freezeLookupTable", "extendLookupTable", "addr", "deactivateLookupTable", "closeLookupTable", "decodeRequestUnits", "units", "additionalFee", "RequestUnits", "decodeRequestHeapFrame", "RequestHeapFrame", "decodeSetComputeUnitLimit", "SetComputeUnitLimit", "decodeSetComputeUnitPrice", "microLamports", "SetComputeUnitPrice", "requestUnits", "requestHeapFrame", "setComputeUnitLimit", "setComputeUnitPrice", "u16", "createInstructionWithPublicKey", "instructionIndex", "publicKeyOffset", "signatureOffset", "messageDataOffset", "numSignatures", "padding", "signatureInstructionIndex", "publicKeyInstructionIndex", "messageDataSize", "messageInstructionIndex", "createInstructionWithPrivateKey", "privateKey", "msgHash", "privKey", "secp256k1", "toCompactRawBytes", "recovery", "isValidPrivateKey", "publicKeyToEthAddress", "keccak_256", "recoveryId", "createInstructionWithEthAddress", "ethAddress", "rawAddress", "substr", "dataStart", "ethAddressOffset", "ethAddressInstructionIndex", "pkey", "messageHash", "staker", "withdrawer", "unixTimestamp", "custodian", "_Lockup", "decodeInitialize", "Initialize", "stakePubkey", "decodeDelegate", "Delegate", "decodeAuthorize", "newAuthorized", "stakeAuthorizationType", "Authorize", "o", "custodianPubkey", "decodeAuthorizeWithSeed", "authoritySeed", "authorityOwner", "AuthorizeWithSeed", "authorityBase", "decodeSplit", "Split", "splitStakePubkey", "decodeMerge", "Merge", "sourceStakePubKey", "decodeWithdraw", "Withdraw", "decodeDeactivate", "Deactivate", "Staker", "Withdrawer", "initialize", "maybeLockup", "delegate", "authorize", "authorizeWithSeed", "splitInstruction", "split", "rentExemptReserve", "splitWithSeed", "merge", "withdraw", "deactivate", "authorizedWithdrawer", "decodeInitializeAccount", "InitializeAccount", "voteAuthorizationType", "currentAuthorityDerivedKeyOwnerPubkey", "currentAuthorityDerivedKeySeed", "currentAuthorityDerivedKeyBasePubkey", "authorizedWithdrawerPubkey", "UpdateValidatorIdentity", "Voter", "initializeAccount", "safeWithdraw", "currentVoteAccountBalance", "rentExemptMinimum", "updateValidatorIdentity", "website", "details", "iconUrl", "keybaseUsername", "fromConfigData", "configKeyCount", "configKeys", "rawInfo", "parse", "assertType", "votes", "authorizedVoters", "priorVoters", "lastTimestamp", "versionOffset", "va", "rootSlotValid", "http", "devnet", "testnet", "https"]
}
