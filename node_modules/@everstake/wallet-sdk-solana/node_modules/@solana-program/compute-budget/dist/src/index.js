'use strict';

var web3_js = require('@solana/web3.js');

// src/generated/instructions/requestHeapFrame.ts
var COMPUTE_BUDGET_PROGRAM_ADDRESS = "ComputeBudget111111111111111111111111111111";
var ComputeBudgetInstruction = /* @__PURE__ */ ((ComputeBudgetInstruction2) => {
  ComputeBudgetInstruction2[ComputeBudgetInstruction2["RequestUnits"] = 0] = "RequestUnits";
  ComputeBudgetInstruction2[ComputeBudgetInstruction2["RequestHeapFrame"] = 1] = "RequestHeapFrame";
  ComputeBudgetInstruction2[ComputeBudgetInstruction2["SetComputeUnitLimit"] = 2] = "SetComputeUnitLimit";
  ComputeBudgetInstruction2[ComputeBudgetInstruction2["SetComputeUnitPrice"] = 3] = "SetComputeUnitPrice";
  ComputeBudgetInstruction2[ComputeBudgetInstruction2["SetLoadedAccountsDataSizeLimit"] = 4] = "SetLoadedAccountsDataSizeLimit";
  return ComputeBudgetInstruction2;
})(ComputeBudgetInstruction || {});
function identifyComputeBudgetInstruction(instruction) {
  const data = "data" in instruction ? instruction.data : instruction;
  if (web3_js.containsBytes(data, web3_js.getU8Encoder().encode(0), 0)) {
    return 0 /* RequestUnits */;
  }
  if (web3_js.containsBytes(data, web3_js.getU8Encoder().encode(1), 0)) {
    return 1 /* RequestHeapFrame */;
  }
  if (web3_js.containsBytes(data, web3_js.getU8Encoder().encode(2), 0)) {
    return 2 /* SetComputeUnitLimit */;
  }
  if (web3_js.containsBytes(data, web3_js.getU8Encoder().encode(3), 0)) {
    return 3 /* SetComputeUnitPrice */;
  }
  if (web3_js.containsBytes(data, web3_js.getU8Encoder().encode(4), 0)) {
    return 4 /* SetLoadedAccountsDataSizeLimit */;
  }
  throw new Error(
    "The provided instruction could not be identified as a computeBudget instruction."
  );
}

// src/generated/instructions/requestHeapFrame.ts
var REQUEST_HEAP_FRAME_DISCRIMINATOR = 1;
function getRequestHeapFrameDiscriminatorBytes() {
  return web3_js.getU8Encoder().encode(REQUEST_HEAP_FRAME_DISCRIMINATOR);
}
function getRequestHeapFrameInstructionDataEncoder() {
  return web3_js.transformEncoder(
    web3_js.getStructEncoder([
      ["discriminator", web3_js.getU8Encoder()],
      ["bytes", web3_js.getU32Encoder()]
    ]),
    (value) => ({ ...value, discriminator: REQUEST_HEAP_FRAME_DISCRIMINATOR })
  );
}
function getRequestHeapFrameInstructionDataDecoder() {
  return web3_js.getStructDecoder([
    ["discriminator", web3_js.getU8Decoder()],
    ["bytes", web3_js.getU32Decoder()]
  ]);
}
function getRequestHeapFrameInstructionDataCodec() {
  return web3_js.combineCodec(
    getRequestHeapFrameInstructionDataEncoder(),
    getRequestHeapFrameInstructionDataDecoder()
  );
}
function getRequestHeapFrameInstruction(input, config) {
  const programAddress = config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;
  const args = { ...input };
  const instruction = {
    programAddress,
    data: getRequestHeapFrameInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseRequestHeapFrameInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getRequestHeapFrameInstructionDataDecoder().decode(instruction.data)
  };
}
var REQUEST_UNITS_DISCRIMINATOR = 0;
function getRequestUnitsDiscriminatorBytes() {
  return web3_js.getU8Encoder().encode(REQUEST_UNITS_DISCRIMINATOR);
}
function getRequestUnitsInstructionDataEncoder() {
  return web3_js.transformEncoder(
    web3_js.getStructEncoder([
      ["discriminator", web3_js.getU8Encoder()],
      ["units", web3_js.getU32Encoder()],
      ["additionalFee", web3_js.getU32Encoder()]
    ]),
    (value) => ({ ...value, discriminator: REQUEST_UNITS_DISCRIMINATOR })
  );
}
function getRequestUnitsInstructionDataDecoder() {
  return web3_js.getStructDecoder([
    ["discriminator", web3_js.getU8Decoder()],
    ["units", web3_js.getU32Decoder()],
    ["additionalFee", web3_js.getU32Decoder()]
  ]);
}
function getRequestUnitsInstructionDataCodec() {
  return web3_js.combineCodec(
    getRequestUnitsInstructionDataEncoder(),
    getRequestUnitsInstructionDataDecoder()
  );
}
function getRequestUnitsInstruction(input, config) {
  const programAddress = config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;
  const args = { ...input };
  const instruction = {
    programAddress,
    data: getRequestUnitsInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseRequestUnitsInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getRequestUnitsInstructionDataDecoder().decode(instruction.data)
  };
}
var SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR = 2;
function getSetComputeUnitLimitDiscriminatorBytes() {
  return web3_js.getU8Encoder().encode(SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR);
}
function getSetComputeUnitLimitInstructionDataEncoder() {
  return web3_js.transformEncoder(
    web3_js.getStructEncoder([
      ["discriminator", web3_js.getU8Encoder()],
      ["units", web3_js.getU32Encoder()]
    ]),
    (value) => ({
      ...value,
      discriminator: SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR
    })
  );
}
function getSetComputeUnitLimitInstructionDataDecoder() {
  return web3_js.getStructDecoder([
    ["discriminator", web3_js.getU8Decoder()],
    ["units", web3_js.getU32Decoder()]
  ]);
}
function getSetComputeUnitLimitInstructionDataCodec() {
  return web3_js.combineCodec(
    getSetComputeUnitLimitInstructionDataEncoder(),
    getSetComputeUnitLimitInstructionDataDecoder()
  );
}
function getSetComputeUnitLimitInstruction(input, config) {
  const programAddress = config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;
  const args = { ...input };
  const instruction = {
    programAddress,
    data: getSetComputeUnitLimitInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseSetComputeUnitLimitInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getSetComputeUnitLimitInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR = 3;
function getSetComputeUnitPriceDiscriminatorBytes() {
  return web3_js.getU8Encoder().encode(SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR);
}
function getSetComputeUnitPriceInstructionDataEncoder() {
  return web3_js.transformEncoder(
    web3_js.getStructEncoder([
      ["discriminator", web3_js.getU8Encoder()],
      ["microLamports", web3_js.getU64Encoder()]
    ]),
    (value) => ({
      ...value,
      discriminator: SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR
    })
  );
}
function getSetComputeUnitPriceInstructionDataDecoder() {
  return web3_js.getStructDecoder([
    ["discriminator", web3_js.getU8Decoder()],
    ["microLamports", web3_js.getU64Decoder()]
  ]);
}
function getSetComputeUnitPriceInstructionDataCodec() {
  return web3_js.combineCodec(
    getSetComputeUnitPriceInstructionDataEncoder(),
    getSetComputeUnitPriceInstructionDataDecoder()
  );
}
function getSetComputeUnitPriceInstruction(input, config) {
  const programAddress = config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;
  const args = { ...input };
  const instruction = {
    programAddress,
    data: getSetComputeUnitPriceInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseSetComputeUnitPriceInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getSetComputeUnitPriceInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR = 4;
function getSetLoadedAccountsDataSizeLimitDiscriminatorBytes() {
  return web3_js.getU8Encoder().encode(
    SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR
  );
}
function getSetLoadedAccountsDataSizeLimitInstructionDataEncoder() {
  return web3_js.transformEncoder(
    web3_js.getStructEncoder([
      ["discriminator", web3_js.getU8Encoder()],
      ["accountDataSizeLimit", web3_js.getU32Encoder()]
    ]),
    (value) => ({
      ...value,
      discriminator: SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR
    })
  );
}
function getSetLoadedAccountsDataSizeLimitInstructionDataDecoder() {
  return web3_js.getStructDecoder([
    ["discriminator", web3_js.getU8Decoder()],
    ["accountDataSizeLimit", web3_js.getU32Decoder()]
  ]);
}
function getSetLoadedAccountsDataSizeLimitInstructionDataCodec() {
  return web3_js.combineCodec(
    getSetLoadedAccountsDataSizeLimitInstructionDataEncoder(),
    getSetLoadedAccountsDataSizeLimitInstructionDataDecoder()
  );
}
function getSetLoadedAccountsDataSizeLimitInstruction(input, config) {
  const programAddress = config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;
  const args = { ...input };
  const instruction = {
    programAddress,
    data: getSetLoadedAccountsDataSizeLimitInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseSetLoadedAccountsDataSizeLimitInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getSetLoadedAccountsDataSizeLimitInstructionDataDecoder().decode(
      instruction.data
    )
  };
}

exports.COMPUTE_BUDGET_PROGRAM_ADDRESS = COMPUTE_BUDGET_PROGRAM_ADDRESS;
exports.ComputeBudgetInstruction = ComputeBudgetInstruction;
exports.REQUEST_HEAP_FRAME_DISCRIMINATOR = REQUEST_HEAP_FRAME_DISCRIMINATOR;
exports.REQUEST_UNITS_DISCRIMINATOR = REQUEST_UNITS_DISCRIMINATOR;
exports.SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR = SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR;
exports.SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR = SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR;
exports.SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR = SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR;
exports.getRequestHeapFrameDiscriminatorBytes = getRequestHeapFrameDiscriminatorBytes;
exports.getRequestHeapFrameInstruction = getRequestHeapFrameInstruction;
exports.getRequestHeapFrameInstructionDataCodec = getRequestHeapFrameInstructionDataCodec;
exports.getRequestHeapFrameInstructionDataDecoder = getRequestHeapFrameInstructionDataDecoder;
exports.getRequestHeapFrameInstructionDataEncoder = getRequestHeapFrameInstructionDataEncoder;
exports.getRequestUnitsDiscriminatorBytes = getRequestUnitsDiscriminatorBytes;
exports.getRequestUnitsInstruction = getRequestUnitsInstruction;
exports.getRequestUnitsInstructionDataCodec = getRequestUnitsInstructionDataCodec;
exports.getRequestUnitsInstructionDataDecoder = getRequestUnitsInstructionDataDecoder;
exports.getRequestUnitsInstructionDataEncoder = getRequestUnitsInstructionDataEncoder;
exports.getSetComputeUnitLimitDiscriminatorBytes = getSetComputeUnitLimitDiscriminatorBytes;
exports.getSetComputeUnitLimitInstruction = getSetComputeUnitLimitInstruction;
exports.getSetComputeUnitLimitInstructionDataCodec = getSetComputeUnitLimitInstructionDataCodec;
exports.getSetComputeUnitLimitInstructionDataDecoder = getSetComputeUnitLimitInstructionDataDecoder;
exports.getSetComputeUnitLimitInstructionDataEncoder = getSetComputeUnitLimitInstructionDataEncoder;
exports.getSetComputeUnitPriceDiscriminatorBytes = getSetComputeUnitPriceDiscriminatorBytes;
exports.getSetComputeUnitPriceInstruction = getSetComputeUnitPriceInstruction;
exports.getSetComputeUnitPriceInstructionDataCodec = getSetComputeUnitPriceInstructionDataCodec;
exports.getSetComputeUnitPriceInstructionDataDecoder = getSetComputeUnitPriceInstructionDataDecoder;
exports.getSetComputeUnitPriceInstructionDataEncoder = getSetComputeUnitPriceInstructionDataEncoder;
exports.getSetLoadedAccountsDataSizeLimitDiscriminatorBytes = getSetLoadedAccountsDataSizeLimitDiscriminatorBytes;
exports.getSetLoadedAccountsDataSizeLimitInstruction = getSetLoadedAccountsDataSizeLimitInstruction;
exports.getSetLoadedAccountsDataSizeLimitInstructionDataCodec = getSetLoadedAccountsDataSizeLimitInstructionDataCodec;
exports.getSetLoadedAccountsDataSizeLimitInstructionDataDecoder = getSetLoadedAccountsDataSizeLimitInstructionDataDecoder;
exports.getSetLoadedAccountsDataSizeLimitInstructionDataEncoder = getSetLoadedAccountsDataSizeLimitInstructionDataEncoder;
exports.identifyComputeBudgetInstruction = identifyComputeBudgetInstruction;
exports.parseRequestHeapFrameInstruction = parseRequestHeapFrameInstruction;
exports.parseRequestUnitsInstruction = parseRequestUnitsInstruction;
exports.parseSetComputeUnitLimitInstruction = parseSetComputeUnitLimitInstruction;
exports.parseSetComputeUnitPriceInstruction = parseSetComputeUnitPriceInstruction;
exports.parseSetLoadedAccountsDataSizeLimitInstruction = parseSetLoadedAccountsDataSizeLimitInstruction;
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map